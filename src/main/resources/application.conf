akka {

  # Akka logging configuration. ***Do not touch. To configure logging, see logback.xml.***

  # If you set the loglevel to a higher level than "DEBUG", any DEBUG events will be filtered out already
  # at the source and will never reach the logging backend, regardless of how logging is configured there.
  loglevel = DEBUG
  # Optimization: If an event would not be logged by slf4j, it will not be sent to the logging event bus.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  # Only use the slf4j logging, do not log directly to console.
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  stdout-loglevel = OFF
  logger-startup-timeout = 60s

  log-dead-letters = 100
  log-dead-letters-during-shutdown = false

  actor {
    #provider = akka.cluster.ClusterActorRefProvider
    provider = cluster

    warn-about-java-serializer-usage = off
    allow-java-serialization = on
  }

  remote {
    artery {
      advanced {

        //default 262 144 byte
        //now     26  214 400 byte
        maximum-frame-size = 2MiB

        #The default size of the system messages buffer is 20000
        #system-message-buffer-size = 20000

        # queue for outgoing control (system) messages
        #outbound-control-queue-size = 3072
      }
    }
  }

  cluster {

    shutdown-after-unsuccessful-join-seed-nodes = 30s

    configuration-compatibility-check.enforce-on-join = on #off

    # General recomentation how to pick AutoDowning provides is following:
    # If you have a static cluster (like always 3 or 5 nodes) - use Static Quorum
    # If you have a mode flexible scenarion where you scale up for 5 tp 9 and down to 7 - use Keep Majority
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    #
    split-brain-resolver {
      # static-quorum, keep-majority, keep-oldest, down-all, lease-majority
      active-strategy = keep-majority

      #//#stable-after
      # Time margin after which shards or singletons that belonged to a downed/removed
      # partition are created in surviving partition. The purpose of this margin is that
      # in case of a network partition the persistent actors in the non-surviving partitions
      # must be stopped before corresponding persistent actors are started somewhere else.
      # This is useful if you implement downing strategies that handle network partitions,
      # e.g. by keeping the larger side of the partition and shutting down the smaller side.
      # Decision is taken by the strategy when there has been no membership or
      # reachability changes for this duration, i.e. the cluster state is stable.
      stable-after = 7s

      # When reachability observations by the failure detector are changed the SBR decisions
      # are deferred until there are no changes within the 'stable-after' duration.
      # If this continues for too long it might be an indication of an unstable system/network
      # and it could result in delayed or conflicting decisions on separate sides of a network
      # partition.
      # As a precaution for that scenario all nodes are downed if no decision is made within
      # `stable-after + down-all-when-unstable` from the first unreachability event.
      # The measurement is reset if all unreachable have been healed, downed or removed, or
      # if there are no changes within `stable-after * 2`.
      # The value can be on, off, or a duration.
      # By default it is 'on' and then it is derived to be 3/4 of stable-after.
      down-all-when-unstable = on
    }



    use-dispatcher = "akka.cluster-dispatcher"

    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      threshold = 10.0
      heartbeat-interval = 1 s
      min-std-deviation = 100 ms
      acceptable-heartbeat-pause = 3 s
    }

    # CoordinatedShutdown will run the tasks that are added to these
    # phases. The phases can be ordered as a DAG by defining the
    # dependencies between the phases.
    # Each phase is defined as a named config section with the
    # following optional properties:
    # - timeout=15s: Override the default-phase-timeout for this phase.
    # - recover=off: If the phase fails the shutdown is aborted
    #                and depending phases will not be executed.
    # depends-on=[]: Run the phase after the given phases
    coordinated-shutdown {
      # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
      # if this is set to 'on'. It is done after termination of the
      # ActorSystem if terminate-actor-system=on, otherwise it is done
      # immediately when the last phase is reached.
      exit-jvm = on
      default-phase-timeout = 10 seconds
    }
    
    sharding {
      distributed-data.delta-crdt.enabled = off
      state-store-mode = ddata
    }

    #persistence.use-dispatcher = shard-dispatcher
  }

  #https://github.com/akka/akka-management/blob/master/cluster-http/src/main/resources/reference.conf
  management {
    # registers bootstrap routes to be included in akka-management's http endpoint
    # http.route-providers += "akka.management.cluster.ClusterHttpManagementRouteProvider"
    cluster.http {
      #host = 0.0.0.0
      #port = 19999
    }
  }

  metrics-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 2
    }
  }

  cluster-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 2
    }
  }


  shard-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 4
    }
  }

}

akka.cluster.metrics.enabled = off
akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]

